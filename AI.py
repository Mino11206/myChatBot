# import google.generativeai as gemini
# import os
# import streamlit as st

# st.title("ChatBot du l·ªãch th√¥ng minh:")

# os.environ["GRPC_VERBOSITY"] = "NONE"
# os.environ["GLOG_minloglevel"] = "2"

# gemini.configure(api_key=st.secrets["GEMINI_API_KEY"])
# model = gemini.GenerativeModel("gemini-2.5-flash")

# history =[""]
# context = "B·∫°n l√† TravelBot m·ªôt t∆∞ v·∫•n vi√™n du l·ªãch chuy√™n nghi·ªáp, h√£y d√πng ti·∫øng vi·ªát m·ªôt c√°ch chuy√™n nghi·ªáp v√† cu·ªën h√∫t ghi nh·ªõ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc v√† tr·∫£ l·ªùi c√¢u h·ªèi"
# query = "context: " + context + ", your previous response: " + history[-1]
# query += st.text_input("Nh·∫≠p v√†o c√¢u h·ªèi c·ªßa b·∫°n: ", key = "query_input")
# if st.button("G·ª≠i"):
#     response = model.generate_content(query)
#     history.append(response.text)
#     st.success(response.text)


        
import streamlit as st
import google.generativeai as gemini
import os

# ===== C·∫•u h√¨nh =====
st.set_page_config(page_title="ChatBot Du L·ªãch Th√¥ng Minh", page_icon="üåè")
st.title("üå¥ ChatBot Du L·ªãch Th√¥ng Minh")

# Gi·∫£m log
os.environ["GRPC_VERBOSITY"] = "NONE"
os.environ["GLOG_minloglevel"] = "2"

# K·∫øt n·ªëi API Gemini
gemini.configure(api_key=st.secrets["GEMINI_API_KEY"])
model = gemini.GenerativeModel("gemini-2.5-flash")

# ===== Kh·ªüi t·∫°o l·ªãch s·ª≠ =====
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# ===== Giao di·ªán =====
user_input = st.text_input("‚úàÔ∏è H√£y h·ªèi TravelBot ƒëi·ªÅu b·∫°n mu·ªën:", key="query_input")

# ===== Khi ng∆∞·ªùi d√πng g·ª≠i =====
if st.button("G·ª≠i") and user_input.strip():
    # T·∫°o prompt g·ªìm context + l·ªãch s·ª≠ h·ªôi tho·∫°i
    context = (
        "B·∫°n l√† TravelBot ‚Äî m·ªôt t∆∞ v·∫•n vi√™n du l·ªãch chuy√™n nghi·ªáp. "
        "H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, gi·ªçng vƒÉn th√¢n thi·ªán, sinh ƒë·ªông, g·ª£i m·ªü. "
        "Gi·ªØ ng·ªØ c·∫£nh h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥ v√† kh√¥ng l·∫∑p l·∫°i c√¢u h·ªèi."
    )

    # Gh√©p l·ªãch s·ª≠ tr√≤ chuy·ªán v√†o prompt
    conversation = ""
    for role, text in st.session_state.chat_history[-6:]:  # ch·ªâ l·∫•y 6 l·∫ßn g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh qu√° d√†i
        conversation += f"{role}: {text}\n"

    prompt = f"{context}\n\n{conversation}\nNg∆∞·ªùi d√πng: {user_input}\nTravelBot:"

    # G·ªçi API
    response = model.generate_content(prompt)
    answer = response.text.strip()

    # C·∫≠p nh·∫≠t l·ªãch s·ª≠
    st.session_state.chat_history.append(("Ng∆∞·ªùi d√πng", user_input))
    st.session_state.chat_history.append(("TravelBot", answer))

# ===== Hi·ªÉn th·ªã h·ªôi tho·∫°i =====
for role, text in reversed(st.session_state.chat_history):
    if role == "TravelBot":
        st.markdown(f"üß≠ **{role}:** {text}")
    else:
        st.markdown(f"üë§ **{role}:** {text}")
